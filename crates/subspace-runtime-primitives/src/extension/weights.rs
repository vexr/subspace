
//! Autogenerated weights for `balance_transfer_check_extension`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-06-04, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro`, CPU: `M1 Max`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/subspace-node
// benchmark
// pallet
// --runtime=./target/release/wbuild/subspace-runtime/subspace_runtime.compact.compressed.wasm
// --genesis-builder=none
// --steps=50
// --repeat=20
// --pallet=balance_transfer_check_extension
// --extrinsic=*
// --wasm-execution=compiled
// --heap-pages=4096
// --output=./crates/subspace-runtime-primitives/src/extension/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `balance_transfer_check_extension`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> crate::extension::WeightInfo for WeightInfo<T> {
	/// Storage: `RuntimeConfigs::EnableBalanceTransfers` (r:1 w:0)
	/// Proof: `RuntimeConfigs::EnableBalanceTransfers` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn balance_transfer_check_multiple(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_067_813, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			// Standard Error: 38
			.saturating_add(Weight::from_parts(4, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RuntimeConfigs::EnableBalanceTransfers` (r:1 w:0)
	/// Proof: `RuntimeConfigs::EnableBalanceTransfers` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn balance_transfer_check_utility(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_052_471, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `RuntimeConfigs::EnableBalanceTransfers` (r:1 w:0)
	/// Proof: `RuntimeConfigs::EnableBalanceTransfers` (`max_values`: Some(1), `max_size`: Some(1), added: 496, mode: `MaxEncodedLen`)
	/// The range of component `c` is `[0, 1000]`.
	fn balance_transfer_check_multisig(c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1486`
		// Minimum execution time: 1_000_000 picoseconds.
		Weight::from_parts(1_024_508, 0)
			.saturating_add(Weight::from_parts(0, 1486))
			// Standard Error: 37
			.saturating_add(Weight::from_parts(79, 0).saturating_mul(c.into()))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
