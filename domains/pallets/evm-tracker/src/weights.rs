
//! Autogenerated weights for `pallet_evm_tracker`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 46.2.0
//! DATE: 2025-05-28, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Genes-MacBook-Pro.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: 1024

// Executed Command:
// ./target/release/subspace-node
// domain
// benchmark
// pallet
// --runtime=./target/release/wbuild/evm-domain-runtime/evm_domain_runtime.compact.compressed.wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --steps=50
// --repeat=20
// --extrinsic=*
// --pallet
// pallet_evm_tracker
// --output
// ./domains/pallets/evm-tracker/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

// Manually added import
use crate as pallet_evm_tracker;

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_evm_tracker`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_evm_tracker::WeightInfo for WeightInfo<T> {
	/// Storage: `EVMNoncetracker::ContractCreationAllowedBy` (r:1 w:0)
	/// Proof: `EVMNoncetracker::ContractCreationAllowedBy` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn validate_nested_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `209`
		//  Estimated: `1694`
		// Minimum execution time: 3_000_000 picoseconds.
		Weight::from_parts(3_000_000, 0)
			.saturating_add(Weight::from_parts(0, 1694))
			.saturating_add(T::DbWeight::get().reads(1))
	}
}
